#!/usr/bin/env ruby
=begin
# program requirements:
# * create list of original files
# * create of list of copied files
# * compare file list

# listFiles(directory) Depth First Search? 
# * list Directory entries
# * if entry is a directory
#    * go into directory, listFiles(thisEntry)
# * else
#    * process file
#    * if filename is not in database
#       * get file MD5 checksum
#       * store filename and checksum in database for later use
# 
=end

$test_data_file = '/Users/franksuarez/bin/test/data/bookjson.txt'
$READBUFSIZE = 16
$ORIG_TABLENAME = 'original'
$NEW_TABLENAME = 'new'
$count = 0


require 'pathname'
require 'digest'

def dPuts(s)
  if ($DEBUG)
    puts(s)
  end
end

def stderr(s)
  $stderr.puts "STDERR: %s" % s
end

# List files recursively with their MD5SUM
# @param location  Pathname object
def listFiles(pnObject)
  stderr "Directory: %s" % pnObject.to_path
  pnObject.each_child() do |x|
    if (x.directory?)
      listFiles(x)
    elsif (x.file?)
      stderr "Count: %d" % $count
      stderr "File: %s" % x.to_path
      xMd5 = getMd5(x)
      
      stderr "MD5: %s" % xMd5
      
      $stdout.puts "%s\t%s" % [xMd5,x.to_path]
      
      $count = $count + 1
    else
      puts "Not a file or directory!!"
      exit(false)
    end
    stderr "----------"
  end
  stderr "##########"
end


# Calculates the MD5SUM of a Pathname file object
def getMd5(pnObject)
  md5 = Digest::MD5.new
  f = pnObject.open()
  
  while (! f.eof?)
    data = f.read($READBUFSIZE)
    md5 << data
  end
  return md5.hexdigest
end



def main()
  currentPath = Pathname.new(Pathname.getwd())
  listFiles(currentPath)
  
end

main()

